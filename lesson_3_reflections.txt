When would you want to create a remote repository rather than keeping all your work local?
	
	Whenever I am working on a project with a team. This allows the team to have a centralized version of the project which will contain the latest changes made by the members. And all of them can access the latest state of the repo at any time.
	Also, for security reasons, your projects are safer on GitHub servers than only on your local computer.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	I may be working on some changes and other people may be working on the same lines I am working on. This will cause conflicts. If there is a conflict I wouldn't want Git to be updating my files constantly. If you are in the process of creating a new feature, you don't want to solve those conflicts before finishing your feature first.
    This way you can keep focus and decide when you want to get the latest versions and integrate changes. It is best to have the choice to decide when to pull changes from a remote. This also gives you the freedom to finish a logical unit of work, without worrying that other changes that may have been added to the remote will alter my ongoing work.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	A clone is an exact copy of a repository, which includes the files and their history. It is possible to clone repositories in different locations on your local computer, or from a remote server. You use clone when you need to fetch a repository to a particular location on your local machine. 
	
	A fork basically consists of cloning a repository, but only on a GitHub server instead of locally as in regular cloning. You can use forks whenever you want to work on files hosted on a GitHub repository, whose owner does not allow changes, or when you don't want to alter the original GitHub repository in question. 
	
	A branch is a label that is given to a list of commits that are reachable from the tip of such list. The branch name points to the latest commit, making all the commits on the branch reachable by just referring to the branch name. 
	
	But what if you want to make experiments without directly affecting the main project, and then if the experiment worked include it in the main project?
	If you clone the main project's repository and make changes in the clone, this won't include any possible changes made to the main project after you cloned it. What this means is that if you have repo A, clone it to repo A', you make changes to repo A', while you are at it, repo A has changes, so repo A' won't have the changes made to repo A. 
	A branch is a label that is given to a list of commits that are reachable from the tip of such list. The branch name points to the latest commit, making all the commits on the branch reachable by just referring to the branch name. When you assign a branch to a commit, this will split the workflow on a file or files from that point, so file X will have 2 different versions now. But branches can be merged at any point. So, if you want to work in parallel to the main project, add new functionality or experimental changes that will eventually be included into the main project, in this situation it is best to use branches.
	
What is the benefit of having a copy of the last known state of the remote stored locally?

	It allows to easily detect at which commit the remote and local version start to differ. If the local repository didn't keep track of the last known state of the remote, then whenever the remote and local repository were out of sync, there wouldn't be a way to know which version to take. For example, if the remote had commits that the local repository doesn't, and the local had commits that the remote doesn't, at this point if the remote changes are pulled to local, the local commits made after both repos got out of sync will be lost.
	
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	One option is to assign a particular task or area of the project to each team member. That way you'd make sure that nobody touches files that others are working on. However this would limit the possibilities in which modern software development is done. Another option is to use a cloud-based service such as Google Drive or Dropbox. The easier part to this is that I wouldn't have to worry about learning a train myself in using Git or GitHub, and it would probably be a lot less complex to make simple change. However for relatively big projects where there are multiple people interacting in different areas, it would be hard if not impossible to keep everyone's changes working out without inflicting undesired changes into the project or one's version. Also it would be hard to revert changes in the case it is necessary to get back to a previous version of the files, because there would not be a file history. There is no a sophisticated way to detect this without a Version Control System like Git and GitHub.
	
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Creating a separate branch from the main project branch, allows us to be experimental, make changes that we know will not immediately affect the working branch, often master. This way we don't have to worry about damaging the main project branch, when we are introducing new changes, allowing us to work more confidently on a particular feature or issue and testing the outcome of such implementation. This way it is not necessary to make a big working commit at once with all the new functionality added, rather we can work more naturally making small commits per logical change to our new branch. Also it is a good practice to have other members of the project to review our changes, creating a new branch, these changes are more clearly visible. GitHub supports these reviews by allowing us to push the separate branch we added our changes to and then creating a pull request, which will only succeed if our changes are approved by other members of the team. When contributing to a public repository, itâ€™s standard practice to make the changes in a non-master branch within the repository. This way, you can easily keep your master branch up-to-date with master of the original repository, and merge changes from master into your branch when you are ready.
	
	The only advantage about making changes directly in master, the branch that contains the end product version of the project, is that it leaves out the complexity of the logistics carried out when doing merges and pull requests. But this is not really feasible in a collaborative environment.