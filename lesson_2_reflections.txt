What happens when you initialize a repository? Why do you need to do it?
	
	A new sub-directory ".git" gets created within the working directory.
	".git" contains metadata about the history of the files in the repository.
	This means all the files within this working directory are now being tracked by Git.
	I need to do this in order to start tracking the history of the 
	files with Git and be able to add commits. 
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory is the directory where we have our regular files.
	These are the files that we normally work on and make changes to.
	
	The repository is where we have all of our commits, and it contains all the
	recorded history of the changes made to the files.
	
	The staging area is an intermediate layer between the working directory and
	the repository. It allows us to choose what files will be sent to the repository
	when we perform our next commit.

How can you use the staging area to make sure you have one commit per logical
change?

	The Staging Area allows us to separate our commits per files.
	So only the files that have been added to the Staging Area will be committed
	in the next commit you perform.
	With the Staging Area, we can select only the files that contain a logical change
	we've done and then commit it.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When there are a significant amount of features that will be implemented in a project.
	Some changes may be experimental or too risky to implement in the
	working version of our project,
	in this case it is best to create a new branch in which we can make changes a test without
	affecting the original main version of our project.
	These changes can be merged later on into the branch that contains our working version
	of the project.
	A label is the name of a branch.
	Creating branches also eases the way we identify changes in Git, because when you check out to a branch
	you can see a human-readable label instead of a hexadecimal number which is shown when
	we are dealing directly with commits. The label can give a logical sense of what feature or changes will be implemented, like a title.
	
How do the diagrams help you visualize the branch structure?

	It helps me see where the commits are in a sequential manner. It also provides an organized way to display the dependency between commits and branches, allowing me to visualize parallel versions of a project. It also helps me see whther there are branchless commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When two branches are merged, the checked out branch will include the changes of the branch that is being merged into. The commits of each branches are merged in an interleaved manner. This will result in files containing the lines were modified in the latest commits of both branches. Also the checkedout branch that merged the other branch into it, will move its pointer to the merge commit. The merge commit is the first commit that contains all the changes of both branches.
	
	We represent this in a diagram in order to visualize the branches in an abstract way. This help us understand better the idea of how two branches are merged together, and identify each branches individual commits before the merge.
	
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	